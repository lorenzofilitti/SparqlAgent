import os
import sys

current_dir = os.path.dirname(os.path.abspath(__file__))
data_dir = os.path.join(current_dir, 'chroma')

if data_dir not in sys.path:
    sys.path.append(data_dir)

from dataclasses import dataclass
from pathlib import Path
import pandas as pd
import re
import chromadb
import logfire


@dataclass
class Document():
    id: str
    category: str
    user_query: str
    sparql_query: str

def prepare_docs_for_db() -> list[Document]:
    file_path = Path.cwd() / "querySparql.xlsx"
    df = pd.read_excel(file_path, sheet_name="Foglio1")

    try:
        docs = []
        for idx, row in df.iterrows():
            user_query = re.sub("\n", " ", row["question"])
            user_query = re.sub("\t", " ", user_query)

            s_query = re.sub("\n", " ", row["sparql_query"])
            s_query = re.sub("\t", " ", s_query)

            docs.append(
                Document(
                    id = str(idx + 1),
                    category = row["category"],
                    user_query = user_query, 
                    sparql_query = s_query
                )
            )
            
        logfire.info(f"{len(docs)} documents collected.")
        return docs
    except Exception as e:
        logfire.error(f"Error while preparing documents for the db: {e}")

def update_collection(docs: list[Document]) -> None:
    client = chromadb.HttpClient(host='localhost', port=8000)
    query_collection = client.get_collection(name="QueryDB")
    for doc in docs:
        check_if_id_exists = query_collection.get(id = doc.id)

        if check_if_id_exists["ids"]:
            logfire.info(f"Found document with id '{doc.id}'. Updating document.")
            query_collection.update(
                documents=doc.user_query,
                ids=doc.id,
                metadatas=[
                    {
                        "category": doc.category,
                        "sparql_query": doc.sparql_query
                    }]
            )
        else:
            logfire.info("New document found. Adding document to the collection.")
            query_collection.add(
                documents=doc.user_query,
                ids=doc.id,
                metadatas=[
                    {
                        "category": doc.category,
                        "sparql_query": doc.sparql_query
                    }]
            )

